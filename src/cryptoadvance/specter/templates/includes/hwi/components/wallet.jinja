{% if wallet is defined %}

<div id="hwi_display_address" class="flex-center flex-column hidden" style="overflow-wrap: break-word;">
    <h2>{{ _("Confirm Address") }}</h2><br>
    <div>
        {{ _("Please confirm address matches on your <span id=\"hwi_device_name\">device</span>") }}<br><br>
        {{ _("Expected address") }}:<br><span id="expected_address"></span>
    </div>
    <div class="flex-center">
        <img src="{{ url_for('static', filename='img/loader_boxes.svg') }}"/>
    </div>
</div>

<script type="text/javascript">
    async function getConnectedWalletDevices(deviceTypes=null){
        if(deviceTypes==null){
            deviceTypes = [
            {% for device in wallet.devices %}
                `{{ device.device_type }}`,
            {% endfor %}
            ];
        }
        let devices = await enumerate(deviceTypes);
        return devices;
    }
    async function signTx(combine, deviceType, psbt, fingerprint=null, hmac="", wallet_name="", policy_map="",keys_info=[]){
        let devices = await getConnectedWalletDevices([deviceType]);
        if(devices == null || devices.length == 0){
            return;
        }
        let device = await selectDevice(devices);
        console.log(device)
        if(device == null){
            return;
        }

        if (fingerprint && device.fingerprint != fingerprint) {
            handleHWIError(`{{ _("Selected device does not have matching signing key.") }}`);
            return;
        }
        showHWIProgress(`{{ _("Signing transaction...") }}`, `{{ _("Confirm on your") }} ${capitalize(device.type)}.`);
        let signedTx = null;
        try {
            signedTx = await hwi.signTx(device, psbt, "", fingerprint, hmac, wallet_name, policy_map, keys_info);
        } catch (error) {
            handleHWIError(error);
            return;
        }
        hidePageOverlay();
        await combine(signedTx);
        console.log(signedTx);
        console.log(device);
        console.log(deviceType);
        console.log(psbt);
    }

    async function displayAddressOnDevice(address, descriptor){
        let supportedDevices = [
            {% for device in wallet.devices %}
                {% if (device.supports_hwi_multisig_display_address or device.supports_policy_registration) or not wallet.is_multisig %}
                    `{{ device.device_type }}`,
                {% endif %}
            {% endfor %}
        ];
        let devices = await getConnectedWalletDevices(supportedDevices);
        if(devices == null || devices.length==0){
            return;
        }
        // also unlocks it
        let device = await selectDevice(devices);
        if(device == null){
            return;
        }
        console.log(device);
        document.getElementById('expected_address').innerText = address;
        showPageOverlay('hwi_display_address');        
        let result = null;


        let hmac_by_fingerprint = new Map();
        let policy_name_by_fingerprint = new Map();
        let policymap_by_fingerprint = new Map();
        let keysinfo_by_fingerprint = new Map();
        {% for device in wallet.devices %}
            {% for fpr, hmac in wallet.hmac.items() %}
                hmac_by_fingerprint.set('{{ fpr }}', '{{ wallet.hmac[fpr] }}');
                policy_name_by_fingerprint.set('{{ fpr }}', '{{ wallet.policy[fpr].name }}');
                policymap_by_fingerprint.set('{{ fpr }}', '{{ wallet.policy[fpr].policy_map }}');
                keysinfo_by_fingerprint.set('{{ fpr }}', '{{ wallet.policy[fpr].keys_info }}');
            {% endfor %}
        {% endfor %}

        function htmlDecode(input) {
            var doc = new DOMParser().parseFromString(input, "text/html");
            return doc.documentElement.textContent;
        }

        let hmac, wallet_name, policy_map, keys_info;
        if (!hmac_by_fingerprint.has(device.fingerprint)) {
            hmac = "";
            wallet_name = "";
            policy_map = "";
            keys_info = [];
        } else {
            hmac = hmac_by_fingerprint.get(device.fingerprint);
            wallet_name = policy_name_by_fingerprint.get(device.fingerprint);
            policy_map = policymap_by_fingerprint.get(device.fingerprint);

            // TODO: this is most certainly bad, don't do this
            keys_info = JSON.parse(htmlDecode(keysinfo_by_fingerprint.get(device.fingerprint)));
        }

        try {
            result = await hwi.displayAddress(device, descriptor, "", hmac, wallet_name, policy_map, keys_info);
        } catch (error) {
            handleHWIError(error);
            return null;
        }
        console.log(result);
        hidePageOverlay();
        if (address != result &&
            (("{{ specter.chain }}" != "regtest" || !result.startsWith("tb")) ||
            address.slice(0, -6) != "bcrt" + result.slice(2, -6))
        ) {
            showError(`{{ _("Addresses did not match! Be careful! Please contact support and beware of using the displayed address!") }}`);
        } else {
            if (device.type == 'coldcard') {
                showNotification(`{{ _("Address displayed successfully! Please check the device screen.") }}`, 7000);
            } else {
                showNotification(`{{ _("Address was verified successfully!") }}`, 5000);
            }
        }
    }
</script>

{% endif %}
